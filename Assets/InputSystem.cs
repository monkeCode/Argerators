//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""b1f5e8ab-5cb5-456f-8eca-0140d84122e3"",
            ""actions"": [
                {
                    ""name"": ""PointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""abd70ee3-efda-41dc-8538-af5aeee7d279"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""46c4b9f0-1d43-49c6-b610-07e38e6192e0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveState"",
                    ""type"": ""Button"",
                    ""id"": ""ba09ed14-3ca2-476a-8088-3aa7ad0fdb23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0867fb4a-3813-4054-88b1-355224a930ae"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e61d4ebe-682e-4f7a-b6e5-e37d7afd297f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""425021c1-47f2-4649-8ba3-2ef5e0449795"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a63940a-c8b0-4e9b-9cf5-da66a4a4720c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input"",
            ""id"": ""6352e32d-ab28-4bfd-a712-16314e7a5ce9"",
            ""actions"": [
                {
                    ""name"": ""CylinderHandle"",
                    ""type"": ""Button"",
                    ""id"": ""09db7508-6ede-42bc-b486-96b8df5bd434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCylMenu"",
                    ""type"": ""Button"",
                    ""id"": ""15c5a541-35b4-4484-9568-54ffa5f211e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb3c83ef-e1f0-4e95-8675-8cdfcfd88525"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CylinderHandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf04f8ff-5593-48fa-ab6e-c7aba135fe36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCylMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_PointerMove = m_Camera.FindAction("PointerMove", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_MoveState = m_Camera.FindAction("MoveState", throwIfNotFound: true);
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_CylinderHandle = m_Input.FindAction("CylinderHandle", throwIfNotFound: true);
        m_Input_OpenCylMenu = m_Input.FindAction("OpenCylMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_PointerMove;
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_MoveState;
    public struct CameraActions
    {
        private @InputSystem m_Wrapper;
        public CameraActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerMove => m_Wrapper.m_Camera_PointerMove;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @MoveState => m_Wrapper.m_Camera_MoveState;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @PointerMove.started += instance.OnPointerMove;
            @PointerMove.performed += instance.OnPointerMove;
            @PointerMove.canceled += instance.OnPointerMove;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @MoveState.started += instance.OnMoveState;
            @MoveState.performed += instance.OnMoveState;
            @MoveState.canceled += instance.OnMoveState;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @PointerMove.started -= instance.OnPointerMove;
            @PointerMove.performed -= instance.OnPointerMove;
            @PointerMove.canceled -= instance.OnPointerMove;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @MoveState.started -= instance.OnMoveState;
            @MoveState.performed -= instance.OnMoveState;
            @MoveState.canceled -= instance.OnMoveState;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Input
    private readonly InputActionMap m_Input;
    private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
    private readonly InputAction m_Input_CylinderHandle;
    private readonly InputAction m_Input_OpenCylMenu;
    public struct InputActions
    {
        private @InputSystem m_Wrapper;
        public InputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @CylinderHandle => m_Wrapper.m_Input_CylinderHandle;
        public InputAction @OpenCylMenu => m_Wrapper.m_Input_OpenCylMenu;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void AddCallbacks(IInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
            @CylinderHandle.started += instance.OnCylinderHandle;
            @CylinderHandle.performed += instance.OnCylinderHandle;
            @CylinderHandle.canceled += instance.OnCylinderHandle;
            @OpenCylMenu.started += instance.OnOpenCylMenu;
            @OpenCylMenu.performed += instance.OnOpenCylMenu;
            @OpenCylMenu.canceled += instance.OnOpenCylMenu;
        }

        private void UnregisterCallbacks(IInputActions instance)
        {
            @CylinderHandle.started -= instance.OnCylinderHandle;
            @CylinderHandle.performed -= instance.OnCylinderHandle;
            @CylinderHandle.canceled -= instance.OnCylinderHandle;
            @OpenCylMenu.started -= instance.OnOpenCylMenu;
            @OpenCylMenu.performed -= instance.OnOpenCylMenu;
            @OpenCylMenu.canceled -= instance.OnOpenCylMenu;
        }

        public void RemoveCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface ICameraActions
    {
        void OnPointerMove(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnMoveState(InputAction.CallbackContext context);
    }
    public interface IInputActions
    {
        void OnCylinderHandle(InputAction.CallbackContext context);
        void OnOpenCylMenu(InputAction.CallbackContext context);
    }
}
